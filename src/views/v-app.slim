polymer-element name="v-app"
  template
    link rel="stylesheet" href="v-app.css"

    .wrap class="{{'scene--'+sceneNameMap[sceneIndex]}}"

      .btn.left on-click="onPrevScene"
        | &lt;

      .btn.right on-click="onNextScene"
        | &gt;

      #world data-limit-y="0" data-scalar-x="10" data-friction-x=".1"

        .layer data-depth="0"
          .scene.summer
            / img.el src="/src/images/seasons/summer/summer-sun-bg.png"

        .layer data-depth="0.05"
          .scene.summer
            img.el src="/src/images/seasons/summer/summer-clouds.png"


        .layer data-depth="0.25"
          .scene.summer
            img.el.bg-mountains src="/src/images/seasons/summer/summer-bg-mountain.png"

        .layer data-depth="0.35"
          .scene.summer
            img.el src="/src/images/seasons/summer/summer-birds.png"

        .layer data-depth="0.75"
          .correctiveLayer

            .scene.summer
              img.el src="/src/images/seasons/summer/summer-kids.png"

        .layer data-depth="0.8"
          .correctiveLayer

            .scene.summer
              img.el src="/src/images/seasons/summer/summer-grass.png"


        .layer data-depth="0.90"
          .correctiveLayer

            .scene.summer
              img.el.tree src="/src/images/seasons/summer/summer-tree.png"

        .layer data-depth="1.00"
          .correctiveLayer

            .scene.summer
              img.el src="/src/images/seasons/summer/summer-hill.png"

  coffee:
    Polymer 'v-app',

      sceneIndex: 0,
      sceneNameMap: [
        'summer'
        'autumn'
        'winter'
        'spring'
      ]

      onNextScene: -> @sceneIndex = Math.min(@sceneIndex+1, 3)
      onPrevScene: -> @sceneIndex = Math.max(@sceneIndex-1, 0)

      ready: ->
        @asyncMethod ->
          $world = @$.world

          ###
          Correct Parallax.JS calculations
          --------------------------------

          Parallax.JS determines the parallax effect based on mouse position in
          the window.  BUT, in our case, the parallax effect should be based 
          around the scene (4x larger than the window).  So the calculation
          should be based on...
            1. Mouse position in relation to the scene (not window)
            2. Width of the scene (not window)
          ###
          oldUpdateDimensions = Parallax::updateDimensions
          Parallax::updateDimensions = ->
            oldUpdateDimensions.call @
            @ww = window.innerWidth*4
            @hw = @ww / 2
            return

          Parallax.prototype.onMouseMove = (event)->
            @ix = ($world.scrollLeft + event.pageX - @hw) / @hw
            @iy = (event.pageY - @hh) / @hh
            return

          parallax = new Parallax @$.world
          PathObserver.defineProperty parallax, 'sceneIndex',
            object: @
            path:'sceneIndex'

          return
